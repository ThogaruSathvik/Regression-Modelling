{
  "hash": "8f069cfef2bc27518920af2698f30c71",
  "result": {
    "markdown": "---\ntitle: \"Data Preprocessing\"\nauthor: \"Sathvik\"\ndesription: \"Data Preprocessing\"\ndate: \"10/09/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - data preprocessing\n---\n\n\n# Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(plotly)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'plotly'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ tibble  3.1.8     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n✔ purrr   0.3.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ plotly::filter() masks dplyr::filter(), stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n```\n:::\n:::\n\n\n# Load datasets\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 32\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <chr>    <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 Resor…       0     342    2015 July         27       1       0       0      2\n 2 Resor…       0     737    2015 July         27       1       0       0      2\n 3 Resor…       0       7    2015 July         27       1       0       1      1\n 4 Resor…       0      13    2015 July         27       1       0       1      1\n 5 Resor…       0      14    2015 July         27       1       0       2      2\n 6 Resor…       0      14    2015 July         27       1       0       2      2\n 7 Resor…       0       0    2015 July         27       1       0       2      2\n 8 Resor…       0       9    2015 July         27       1       0       2      2\n 9 Resor…       1      85    2015 July         27       1       0       3      2\n10 Resor…       1      75    2015 July         27       1       0       3      2\n# … with 119,380 more rows, 22 more variables: children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\nHad a problem while loading the data.`guess_max` determines how many cells in each column are used to make a guess of the column type. we can provide a `guess_max`  for read_excel to correctly guess the column type. \n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 149 × 9\n   datetime             TURB ECOLI arithmetic -…¹ predi…²     SD neg S…³ 1.96 …⁴\n   <dttm>              <dbl> <dbl>          <dbl>   <dbl>  <dbl>   <dbl>   <dbl>\n 1 2019-05-22 10:00:00   3     130           45.9    55.7   85.8    24.6    156.\n 2 2019-05-29 09:45:00   3      77           45.9    55.7   85.8    24.6    156.\n 3 2019-06-05 08:00:00   3.7    50           59.9    72.7  112.     32.1    204.\n 4 2019-06-12 10:00:00  19.9   488          505.    613.   943.    270.    1719.\n 5 2019-06-19 08:00:00  69    2685         2442.   2965.  4561.   1307.    8310.\n 6 2019-06-19 10:15:00  58.9  1990         1998.   2426.  3732.   1069.    6800.\n 7 2019-06-26 08:00:00  15.9   205          380.    461.   710.    203.    1293.\n 8 2019-07-10 08:00:00  14.8   100          347.    421.   648.    186.    1181.\n 9 2019-07-10 10:30:00  14     162          323.    393.   604.    173.    1101.\n10 2019-07-17 08:00:00  43.5   480         1361.   1652.  2542.    728.    4631.\n# … with 139 more rows, 1 more variable: `neg 1.96 SD` <dbl>, and abbreviated\n#   variable names ¹​`arithmetic - Predicted ECOLI`,\n#   ²​`predicted ecoli with Duans smearing adjustment`, ³​`neg SD`, ⁴​`1.96 SD`\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 124,746 × 23\n   agency_cd Name  site_no datetime            tz_cd    pH pH-st…¹    DO DO-st…²\n   <chr>     <chr>   <dbl> <dttm>              <chr> <dbl> <chr>   <dbl> <chr>  \n 1 USGS      Pear… 3451500 2019-03-01 00:00:00 EST      NA <NA>       NA <NA>   \n 2 USGS      Pear… 3451500 2019-03-01 00:15:00 EST      NA <NA>       NA <NA>   \n 3 USGS      Pear… 3451500 2019-03-01 00:30:00 EST      NA <NA>       NA <NA>   \n 4 USGS      Pear… 3451500 2019-03-01 00:45:00 EST      NA <NA>       NA <NA>   \n 5 USGS      Pear… 3451500 2019-03-01 01:00:00 EST      NA <NA>       NA <NA>   \n 6 USGS      Pear… 3451500 2019-03-01 01:15:00 EST      NA <NA>       NA <NA>   \n 7 USGS      Pear… 3451500 2019-03-01 01:30:00 EST      NA <NA>       NA <NA>   \n 8 USGS      Pear… 3451500 2019-03-01 01:45:00 EST      NA <NA>       NA <NA>   \n 9 USGS      Pear… 3451500 2019-03-01 02:00:00 EST      NA <NA>       NA <NA>   \n10 USGS      Pear… 3451500 2019-03-01 02:15:00 EST      NA <NA>       NA <NA>   \n# … with 124,736 more rows, 14 more variables: SC <dbl>, `SC-status` <chr>,\n#   Turb_FNU <dbl>, `Turb-status` <chr>, WL_Elev <dbl>, `WL_Elev-status` <chr>,\n#   Temp_C <dbl>, `Temp-status` <chr>, Q_cfs <dbl>, `Q-status` <chr>,\n#   Stage_ft <dbl>, `Stage - status` <chr>, Precip_in <dbl>,\n#   `Precip-status` <chr>, and abbreviated variable names ¹​`pH-status`,\n#   ²​`DO-status`\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n\n## finding the datetime column class in the datasets\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"POSIXct\" \"POSIXt\" \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"POSIXct\" \"POSIXt\" \n```\n:::\n:::\n\nBoth the datetime columns in the datsets are of the **\"POSIXct\" \"POSIXt\"** class\n\n## finding the range of the datetime column for datasets\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2019-05-22 10:00:00 UTC\" \"2021-10-11 09:55:00 UTC\"\n```\n:::\n:::\n\n\n`n_149_with_Duans` has the data between time period  **2019-05-22 10:00:00 UTC - 2021-10-11 09:55:00 UTC**\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2019-03-01 00:00:00 UTC\" \"2022-09-20 10:30:00 UTC\"\n```\n:::\n:::\n\n\n`pearson_data` has the data data between time period  **2019-03-01 00:00:00 UTC - 2022-09-20 10:30:00 UTC**\n\nRestricting the pearson data in between time range of `n_149_with_Duans` i.e., **2019-05-22 10:00:00 UTC - 2021-10-11 09:55:00 UTC** since we have the Ecoli values for this range of data\n\n\n::: {.cell}\n\n:::\n\n\n\nWhen found the lag between the time periods of each observation, the lag varies differently between the time periods for `n_149_with_Duans` but is constant for `pearson_data` which is **900** secs\n\n::: {.cell}\n::: {.cell-output-display}\n![](data_preprocessing_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](data_preprocessing_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nConsidering only the observations that are in the n_149_with_Duans, merging the `pearson_data` and `n_149_with_Duans`by datetime and keeping all the values in `n_149_with_Duans`\n\n\n::: {.cell}\n\n:::\n\n\nsplitting the datetime column into `Year`, `month`, `day`, and `time` for future data analysis\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "data_preprocessing_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}